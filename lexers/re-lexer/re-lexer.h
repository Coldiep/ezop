#include <list>
#include <vector>
#include "scanner.h"
#include "dfa.h"
#include "re-token.h"
#include "../../parser/public_grammar.h"
#include "../../parser/lexer.h"

namespace relexer {

/*!
 * \brief Определение лексического типа.
 *
 * Структура для хранения данных о лексическом типе,использующаяся в
 * алгоритме лексического анализа.
 */
  struct LexType
  {
    int id_;                //!< Идентификатор типа.
    std::string name_;      //!< Название типа.
    std::string regexp_;    //!< Регулярное выражение, задающее тип.
    DFA* d_;                //!< ДКА, построенный по регулярному выражению.
    bool valid_;            //!< Флаг для определения того, может ли данный тип быть применен к текущему символу входного потока.
    bool is_returned_;      //!< Флаг для указания того, нужно ли включать данный тип в выходное дерево токенов.
    int priority_;          //!< Приоритет лексического типа.
  };
 
 /*!
 * \brief Лексический анализатор для работы с открытыми языками.
 *
 * Класс реализует алгоритм лексического анализа текста, модифицированный для
 * обработки лексических неоднозначностей. Реализована возможность добавления
 * лексических типов на основе регулярных выражений, задания входного потока в
 * виде строки или файла и проведения лексического анализа, результатом которого
 * является дерево токенов.
 */
  class ReLexer : public parser::Lexer
  {
  public:
  //! Получение списка токенов,следующих за данным.
  parser::Lexer::TokenList GetTokens(parser::Token::Ptr t);
  //! Проверка,достигнут ли конец потока.
  bool IsEnd();

  //! Конструктор по умолчнию.
    ReLexer();
  //! Деструктор.
    ~ReLexer();
  //! Входной поток символов.
    std::string stream;
  //! Множество лексических типов.
    std::set <LexType*> lex_types;
  //! Количество лексических типов.
    int types_no;
  //! Дерево токеов - результат лексического анализа.
    TokenTree* tree;
  //! Текущая позиция во входном потоке.
    int cur_pos;

  //! Добавление лексического типа.
  void AddType(std::string name,std::string regexp,int priority,int id = -1,bool ret = true);
  //! Добавление лексического типа.
  void AddType(int id,std::string regexp,int priority = 0,bool ret = true);
  //! Задание входного потока строкой.
  void SetStream(std::string s);
  //! Задание входного потока файлом.
  void SetStreamFile(std::string f,std::string tail);
  //! Проведение лексического анализа.
  void Analyze();
  //! Получение списка токенов,начинающихся с заданной позиции.
  std::set <ReToken*> GetTokensInternal(int pos);
  //! Сброс параметров всех лексических типов в начальные.
  void Reset();
  //! Обработка входной строки для удаления лишних символов.
  std::string Strip(std::string str);
    
  };


}
