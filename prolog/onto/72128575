idconcept(72128575).
in_template(1,1,"1","область","ob","область всех областей",[w("область")],ex("ob",[])).
in_template(1,1,"1","ob","ob","область всех областей",[w("ob")],ex("ob",[])).
in_template(1,1,"2","отображениe","mor","область всех отображений",[w("отображение")],ex("ob",[])).
in_template(1,1,"3","терм","term","область всех выражений",[w("терм")],ex("ob",[])).
in_template(1,1,"4","real","real","область действительных чисел",[w("real")],ex("ob",[])).
in_template(1,1,"5","real_выражение","expr_real","область выражений над действительными числами",[w("real_выражение")],ex("ob",[])).
in_template(1,1,"6","отрицательное real_выражение","minusitem","область выражений над действительными числами",[w("отрицательное"),w("real_выражение")],ex("ob",[])).
in_template(1,1,"7","слагаемое","item","выражение над действительными числами",[w("слагаемое")],ex("ob",[])).
in_template(1,1,"8","степенное real_выражение","index","выражение над действительными числами",[w("степенное"),w("real_выражение")],ex("ob",[])).
in_template(1,1,"9","атомарное real_выражение","simplexpr","выражение над действительными числами",[w("атомарное"),w("real_выражение")],ex("ob",[])).
in_template(1,1,"10","предложение","sentence","Элемент типа ob ",[w("предложение")],ex("ob",[])).
in_template(1,1,"11","текст","text","Элемент типа ob ",[w("текст")],ex("ob",[])).
in_template(1,1,"12","вопрос","question","Элемент типа ob ",[w("вопрос")],ex("ob",[])).
in_template(1,1,"13","команда","command","Элемент типа ob ",[w("команда")],ex("ob",[])).
in_template(1,1,"14","текст вопроса","text_question","Элемент типа ob ",[w("текст"),w("вопроса")],ex("ob",[])).
in_template(1,1,"15","сообщение","message","Элемент типа ob ",[w("сообщение")],ex("ob",[])).
in_template(1,1,"16","тип","type","Элемент типа ob ",[w("тип")],ex("ob",[])).
in_template(1,1,"17","ввести переменную","input_var","Элемент типа ob ",[w("ввести"),w("переменную")],ex("ob",[])).
in_template(1,1,"18","boolean","boolean","Элемент типа ob ",[w("boolean")],ex("ob",[])).
in_template(1,1,"19","список","list","Элемент типа ob ",[w("список")],ex("ob",[])).
in_template(1,1,"20","new","new","Элемент типа ob ",[w("new")],ex("ob",[])).
in_template(1,1,"21","new_word","new_word","Элемент типа ob ",[w("new_word")],ex("ob",[])).
in_template(1,1,"22","l_command","l_command","Элемент типа ob ",[w("l_command")],ex("ob",[])).
in_template(1,1,"23","множество","set_type","Элемент типа ob ",[w("множество")],ex("ob",[])).
in_template(1,1,"24","set_выражение","expr_set","Элемент типа ob ",[w("set_выражение")],ex("ob",[])).
in_template(1,1,"25","item_set_выражение","item_set","Элемент типа ob ",[w("item_set_выражение")],ex("ob",[])).
in_template(1,1,"26","simple_set_выражение","simple_set","Элемент типа ob ",[w("simple_set_выражение")],ex("ob",[])).
in_template(1,1,"27","simple_bool_выражение","simple_bool","Элемент типа ob ",[w("simple_bool_выражение")],ex("ob",[])).
in_template(1,1,"28","conj_bool_выражение","conj_bool","Элемент типа ob ",[w("conj_bool_выражение")],ex("ob",[])).
in_template(1,1,"29","dizj_bool_выражение","dizj_bool","Элемент типа ob ",[w("dizj_bool_выражение")],ex("ob",[])).
in_template(1,1,"30","impl_bool_выражение","impl_bool","Элемент типа ob ",[w("impl_bool_выражение")],ex("ob",[])).
in_template(1,1,"31","bool_выражение","expr_bool","Элемент типа ob ",[w("bool_выражение")],ex("ob",[])).
in_template(1,72128575,"87368462","сущность","c72128575.87368462","Элемент типа область ",[w("сущность")],ex("ob",[])).
in_template(1,72128575,"91430519","связи","c72128575.91430519","Элемент типа область ",[w("связи")],ex("ob",[])).
in_template(1,72128575,"79579372","первый аргумент","c72128575.79579372","Элемент типа отображение ",[w("первый"),w("аргумент")],ex("mor",[])).
in_template(1,72128575,"77785213","второй аргумент","c72128575.77785213","Элемент типа отображение ",[w("второй"),w("аргумент")],ex("mor",[])).
used_concept(0,72128575,1).
resalt_op(72128575,ex("dom",[ex("c72128575.79579372",[])]),ex("c72128575.91430519",[])).
resalt_op(72128575,ex("dom",[ex("c72128575.77785213",[])]),ex("c72128575.91430519",[])).
resalt_op(72128575,ex("cod",[ex("c72128575.79579372",[])]),ex("image",[ex("c72128575.79579372",[]),ex("c72128575.91430519",[])])).
resalt_op(72128575,ex("cod",[ex("c72128575.77785213",[])]),ex("image",[ex("c72128575.77785213",[]),ex("c72128575.91430519",[])])).
descriptor(1,ex("ob",[]),1).
descriptor(1,ex("mor",[]),1).
descriptor(1,ex("term",[]),1).
descriptor(1,ex("real",[]),1).
descriptor(1,ex("expr_real",[]),1).
descriptor(1,ex("minusitem",[]),1).
descriptor(1,ex("item",[]),1).
descriptor(1,ex("index",[]),1).
descriptor(1,ex("simplexpr",[]),1).
descriptor(1,ex("input_var",[]),1).
descriptor(1,ex("sentence",[]),1).
descriptor(1,ex("text",[]),1).
descriptor(1,ex("question",[]),1).
descriptor(1,ex("command",[]),1).
descriptor(1,ex("nil_command",[]),1).
descriptor(1,ex("text_question",[]),1).
descriptor(1,ex("message",[]),1).
descriptor(1,ex("type",[]),1).
descriptor(1,ex("input_var",[]),1).
descriptor(1,ex("boolean",[]),1).
descriptor(1,ex("new_word)",[]),1).
descriptor(1,ex("new",[]),1).
descriptor(1,ex("list",[]),1).
descriptor(1,ex("set_type",[]),1).
descriptor(1,ex("expr_set",[]),1).
descriptor(1,ex("item_set",[]),1).
descriptor(1,ex("simple_set",[]),1).
descriptor(1,ex("l_command",[]),1).
descriptor(1,ex("expr_bool",[]),1).
descriptor(1,ex("impl_bool",[]),1).
descriptor(1,ex("dizj_bool",[]),1).
descriptor(1,ex("conj_bool",[]),1).
descriptor(1,ex("true_bool",[]),1).
descriptor(1,ex("false_bool",[]),1).
descriptor(1,ex("simple_bool",[]),1).
descriptor(72128575,ex("c72128575.87368462",[]),1).
descriptor(72128575,ex("c72128575.91430519",[]),1).
descriptor(72128575,ex("c72128575.79579372",[]),1).
descriptor(72128575,ex("c72128575.77785213",[]),1).
descriptor(72128575,ex("image",[ex("c72128575.79579372",[]),ex("c72128575.91430519",[])]),3).
descriptor(72128575,ex("initial",[]),1).
descriptor(72128575,ex("image",[ex("c72128575.77785213",[]),ex("c72128575.91430519",[])]),3).
descriptor(72128575,ex("attrs",[]),1).
descriptor(72128575,ex("names_of_morphisms",[]),1).
subobject(72128575,ex("attrs",[]),ex("names_of_morphisms",[])).
subobject(1,ex("new_word",[]),ex("new",[])).
subobject(1,ex("ob",[]),ex("type",[])).
subobject(1,ex("expr_real",[]),ex("text_question",[])).
subobject(1,ex("ob",[]),ex("text_question",[])).
subobject(1,ex("input_var",[]),ex("command",[])).
subobject(1,ex("question",[]),ex("sentence",[])).
subobject(1,ex("minusitem",[]),ex("expr_real",[])).
subobject(1,ex("item",[]),ex("expr_real",[])).
subobject(1,ex("index",[]),ex("item",[])).
subobject(1,ex("simplexpr",[]),ex("index",[])).
subobject(1,ex("real",[]),ex("simplexpr",[])).
subobject(1,ex("ob",[]),ex("term",[])).
subobject(1,ex("sentence",[]),ex("text",[])).
subobject(1,ex("boolean",[]),ex("text_question",[])).
subobject(1,ex("mor",[]),ex("text_question",[])).
subobject(1,ex("message",[]),ex("sentence",[])).
subobject(1,ex("item_set",[]),ex("expr_set",[])).
subobject(1,ex("simple_set",[]),ex("item_set",[])).
subobject(1,ex("set_type",[]),ex("simple_set",[])).
subobject(1,ex("expr_set",[]),ex("text_question",[])).
subobject(1,ex("expr_bool",[]),ex("text_question",[])).
subobject(1,ex("impl_bool",[]),ex("expr_bool",[])).
subobject(1,ex("dizj_bool",[]),ex("impl_bool",[])).
subobject(1,ex("conj_bool",[]),ex("dizj_bool",[])).
subobject(1,ex("simple_bool",[]),ex("conj_bool",[])).
subobject(1,ex("boolean",[]),ex("simple_bool",[])).
element(1,ex("ob",[]),ex("ob",[])).
element(1,ex("mor",[]),ex("ob",[])).
element(1,ex("term",[]),ex("ob",[])).
element(1,ex("real",[]),ex("ob",[])).
element(1,ex("expr_real",[]),ex("ob",[])).
element(1,ex("minusitem",[]),ex("ob",[])).
element(1,ex("item",[]),ex("ob",[])).
element(1,ex("index",[]),ex("ob",[])).
element(1,ex("simplexpr",[]),ex("ob",[])).
defin1(72128575,"/********************************************************************/\n/* E-R модель основана на трех понятиях: сущность, связь, свойство  */\n/* Сущность представляет собой любой отличимый тип объектов,        */\n/* информацию о которых мы хотим представлять в системе.            */\n/********************************************************************/ .\n\nсущность - область.\n\n/* Связью называется ассоциированние  двух сущностей. */\n\n[связи] - область.\n\"первый аргумент\", \"второй аргумент\" - отображения.\nобласть определения {первый аргумент} = связи.\nобласть определения {второй аргумент} = связи.\nобласть значений {первый аргумент} = Im первый аргумент (связи).\nобласть значений {второй аргумент} =Im второй аргумент (связи).\n\n/* Используем определение понятия свойства */.\n/* Свойство задается отображением: сущности сопоставляется значение */.\n/* в области признаков (смотри команду \"свойство @Области: @Имя\") */.\n\nсвойства - область.\n\nсвойства - подобласть области Имена отображений .").
defin2(72128575,"\n").
last_cmd(72128575,"\n\nсвойства - подобласть области Имена отображений .\n").
